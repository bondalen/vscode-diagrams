Общий процесс:

///Использование сервиса и репозитория Spring Boot, 
/// определенных во внешней библиотеке

Создайние проекта внешней библиотеки. ПП-1 (библиотека)
Добавение внешней библиотеки в качестве зависимости в основной проект. ПП-2 (зависимость)
Включение сканирования компонентов в основном проекте. ПП-3 (сканирование)

ПП-1 (библиотека):
Разработайте отдельный проект Maven или Gradle, содержащий аннотированные классы Spring @Service и @Repository, а также все связанные сущности или DTO
Репозитории во внешней библиотеке взаимодействуют с базой данных?
No
Обеспечьте правильную структуру пакета в этом проекте
Постройте этот проект для создания файла JAR.

...
Репозитории во внешней библиотеке взаимодействуют с базой данных?
Yes
Конфигурация источника данных (например, URL-адрес базы данных, имя пользователя, пароль) должна быть указана в файле application.properties или application.yml основного приложения Spring Boot
Обеспечьте правильную структуру пакета в этом проекте
...

ПП-2 (зависимость):
В pom.xml (Maven) или build.gradle (Gradle) основного приложения Spring Boot добавьте зависимость к внешнему JAR
Если вы используете локальный JAR-файл, не опубликованный в репозитории, укажите systemPath в Maven или используйте files() в Gradle
Если JAR опубликован в репозитории Maven (локальном или удаленном), объявите его как стандартную зависимость
Конфигурация источника данных (например, URL-адрес базы данных, имя пользователя, пароль) должна быть указана в файле application.properties или application.yml основного приложения Spring Boot
Что то ещё

ПП-3 (сканирование):
В основном приложении Spring Boot убедитесь, что пакеты, содержащие службы и репозитории из внешней библиотеки, включены в сканирование компонентов Spring
Этого можно добиться, используя @ComponentScan в классе конфигурации в основном приложении, указав базовые пакеты внешней библиотеки
В качестве альтернативы, если классы конфигурации внешней библиотеки помечены @Configuration и находятся в пакете, сканируемом по умолчанию (например, подпакет базового пакета основного приложения), явный @ComponentScan может не потребоваться